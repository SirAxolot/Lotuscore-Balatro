[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'Hologram' then
    self.hover_tilt = self.hover_tilt*1.5
    self.children.floating_sprite:draw_shader('hologram', nil, self.ARGS.send_to_shader, nil, self.children.center, 2*scale_mod, 2*rotate_mod)
    self.hover_tilt = self.hover_tilt/1.5
'''
position = "at"
payload = "if false then " # nullify the hologram drawing shader
match_indent = true
overwrite = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = 'local SC_scale = 1.1*(G.debug_splash_size_toggle and 0.8 or 1)'
position = "at"
payload = "local SC_scale = (G.debug_splash_size_toggle and 0.8 or 1)"
match_indent = true
overwrite = true


# Code adapted from cryptid thanks cryptid love you cryptid

# Wee Fibonacci rendering
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = 'if center.name == "Wee Joker" and (center.discovered or self.bypass_discovery_center) then'
position = "before"
payload = '''
if center.name == "lot_floppy" and (center.discovered or self.bypass_discovery_center) then 
    H = W
    self.T.h = H
end
'''
match_indent = true


# Wee Fibonacci rendering
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if _center.name == 'Photograph' and (_center.discovered or self.bypass_discovery_center) then"
position = "before"
payload = '''
if _center.name == 'lot_floppy' and (_center.discovered or self.bypass_discovery_center) then
    self.children.center.scale.y = self.children.center.scale.x
    self.children.center.scale.x = self.children.center.scale.x
end
'''
match_indent = true

# Cube rendering
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = 'elseif self.config.center.name == "Wee Joker" then'
position = "before"
payload = '''
elseif self.config.center.name == "lot_floppy" then 
    H = W
    self.T.h = H*scale
    self.T.w = W*scale
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = 'if self.ability.rental then self.cost = 1 end'
position = "after"
payload = '''
if self.ability.set == 'Booster' and self.ability.name:find('Arcana')
and G.GAME.modifiers.lot_sign_active ~= nil and G.GAME.modifiers.lot_sign_active > 0 then
    self.cost = 0
end
'''
match_indent = true

# Pretty scuffed way to implement whiteboard but ehhh
[[patches]]
[patches.regex]
target = "card.lua"
pattern = '''(?<type>[A-Za-z\._]+).ability.name == ['"](?<name>(?:Gold|Steel|Stone|Lucky|Bonus|Mult|Wild|Glass) Card)['"]'''
position = "at"
payload = ''' (G.FUNCS.lot_match_edition and G.FUNCS.lot_match_edition($type.ability, [[$name]]))'''

[[patches]]
[patches.regex]
target = "card.lua"
pattern = '''(?<type>[A-Za-z\._]+)\s*(?<mid>\S+?)\s*==\s*G\.P_CENTERS\.m_(?<name>[A-Za-z0-9_]+)'''
position = "at"
payload = '''$type (G.FUNCS.lot_match_edition and G.FUNCS.lot_match_edition($mid, G.P_CENTERS.m_$name.name))'''
